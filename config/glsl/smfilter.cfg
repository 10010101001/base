// shadow map filters, arg1 enables color sampling

smfilterg5 = [result [
    @(? $numargs [
        @(? (> $usetexgather 1) [
            #define shadowgather(center, xoff, yoff) textureGatherOffset(tex4, center, shadowtc.z, ivec2(xoff, yoff))
        ] [
            #define shadowgather(center, xoff, yoff) step(shadowtc.z, textureGatherOffset(tex4, center, ivec2(xoff, yoff)))
        ])
        #define colorshadowval(xy, xoff, yoff) shadowcolor(xy + vec2(xoff, yoff))
    ])

    @(? $arg1 "vec3 filtercolorshadow" "float filtershadow") (vec3 shadowtc)
    {
        vec2 offset = fract(shadowtc.xy - 0.5);
        vec2 center = (shadowtc.xy - offset) * shadowatlasscale;
        vec4 group1 = shadowgather(center, -2, -2);
        vec4 group2 = shadowgather(center,  0, -2);
        vec4 group3 = shadowgather(center,  2, -2);
        vec4 group4 = shadowgather(center, -2,  0);
        vec4 group5 = shadowgather(center,  0,  0);
        vec4 group6 = shadowgather(center,  2,  0);
        vec4 group7 = shadowgather(center, -2,  2);
        vec4 group8 = shadowgather(center,  0,  2);
        vec4 group9 = shadowgather(center,  2,  2);

        @(if $arg1 [result [
            group1.ab *= 1.0 - offset.y;
            group2.ab *= 1.0 - offset.y;
            group3.ab *= 1.0 - offset.y;
            group7.rg *= offset.y;
            group8.rg *= offset.y;
            group9.rg *= offset.y;

            vec3 weights = (1.0/25.0)*vec3(1.0 - offset.x, 1.0, offset.x);

            vec4 colorcenter = vec4(shadowtc.xy - offset + 0.5, shadowtc.xy - offset*0.5);
            return dot(group1, weights.xyyx) * colorshadowval(colorcenter.zw, -1.5, -1.5) +
                   dot(group2, weights.yyyy) * colorshadowval(colorcenter.xw,  0.0, -1.5) +
                   dot(group3, weights.yzzy) * colorshadowval(colorcenter.zw,  2.0, -1.5) +
                   dot(group4, weights.xyyx) * colorshadowval(colorcenter.zy, -1.5,  0.0) +
                   dot(group5, weights.yyyy) * colorshadowval(colorcenter.xy,  0.0,  0.0) +
                   dot(group6, weights.yzzy) * colorshadowval(colorcenter.zy,  2.0,  0.0) +
                   dot(group7, weights.xyyx) * colorshadowval(colorcenter.zw, -1.5,  2.0) +
                   dot(group8, weights.yyyy) * colorshadowval(colorcenter.xw,  0.0,  2.0) +
                   dot(group9, weights.yzzy) * colorshadowval(colorcenter.zw,  2.0,  2.0);
        ]] [result [
            vec4 locols = vec4(group1.ab, group3.ab);
            vec4 hicols = vec4(group7.rg, group9.rg);
            locols.yz += group2.ab;
            hicols.yz += group8.rg;
            vec4 midcols = vec4(group1.rg, group3.rg) + vec4(group7.ab, group9.ab) +
                           vec4(group4.rg, group6.rg) + vec4(group4.ab, group6.ab) +
                           mix(locols, hicols, offset.y);
            vec4 cols = group5 + vec4(group2.rg, group8.ab);
            cols.xyz += mix(midcols.xyz, midcols.yzw, offset.x);
            return dot(cols, vec4(1.0/25.0));
        ]])
    }
]]

smfilterg3 = [result [
    @(? $numargs [
        @(? (> $usetexgather 1) [
            #define shadowgather(center, xoff, yoff) textureGatherOffset(tex4, center, shadowtc.z, ivec2(xoff, yoff))
        ] [
            #define shadowgather(center, xoff, yoff) step(shadowtc.z, textureGatherOffset(tex4, center, ivec2(xoff, yoff)))
        ])
        #define colorshadowval(center, xoff, yoff) shadowcolor(center.xy + vec2(xoff, yoff))
    ])

    @(? $arg1 "vec3 filtercolorshadow" "float filtershadow") (vec3 shadowtc)
    {
        vec2 offset = fract(shadowtc.xy - 0.5);
        vec2 center = (shadowtc.xy - offset) * shadowatlasscale;
        vec4 group1 = shadowgather(center, -1, -1);
        vec4 group2 = shadowgather(center,  1, -1);
        vec4 group3 = shadowgather(center, -1,  1);
        vec4 group4 = shadowgather(center,  1,  1);

        @(if $arg1 [result [
            group1.ba *= 1.0 - offset.y;
            group2.ba *= 1.0 - offset.y;
            group3.rg *= offset.y;
            group4.rg *= offset.y;

            vec3 weights = (1.0/9.0)*vec3(1.0 - offset.x, 1.0, offset.x);

            vec3 colorcenter = shadowtc;
            colorcenter.xy -= offset*0.5;
            return dot(group1, weights.xyyx) * colorshadowval(colorcenter, -0.5, -0.5) +
                   dot(group2, weights.yzzy) * colorshadowval(colorcenter,  1.0, -0.5) +
                   dot(group3, weights.xyyx) * colorshadowval(colorcenter, -0.5,  1.0) +
                   dot(group4, weights.yzzy) * colorshadowval(colorcenter,  1.0,  1.0);
        ]] [result [
            vec4 cols = vec4(group1.rg, group2.rg) + vec4(group3.ab, group4.ab) + mix(vec4(group1.ab, group2.ab), vec4(group3.rg, group4.rg), offset.y);
            return dot(mix(cols.xyz, cols.yzw, offset.x), vec3(1.0/9.0));
        ]])
    }
]]

smfilterb5 = [result [
    @(? $numargs [
        #define shadowval(xy, xoff, yoff) float(shadow2DRect(tex4, vec3(xy + vec2(xoff, yoff), shadowtc.z)))
        #define colorshadowval(xy, xoff, yoff) shadowcolor(xy + vec2(xoff, yoff))
    ])

    @(? $arg1 "vec3 filtercolorshadow" "float filtershadow") (vec3 shadowtc)
    {
        vec2 offset = fract(shadowtc.xy - 0.5);
        vec4 center = vec4(shadowtc.xy - offset + 0.5, shadowtc.xy - offset*0.5);
        vec4 size = vec4(offset + 1.0, 2.0 - offset);
        vec4 taps1 = vec4(shadowval(center.zw, -1.5, -1.5),
                          shadowval(center.zw, 2.0, -1.5),
                          shadowval(center.zw, -1.5, 2.0),
                          shadowval(center.zw, 2.0, 2.0));
        vec4 taps2 = vec4(shadowval(center.zy, 2.0, 0.0),
                          shadowval(center.xw, 0.0, 2.0),
                          shadowval(center.zy, -1.5, 0.0),
                          shadowval(center.xw, 0.0, -1.5));
        float taps3 = shadowval(center.xy, 0.0, 0.0);

        @(if $arg1 [result [
            taps1 *= (1.0/25.0)*size.zxzx*size.wwyy;
            taps2 *= (2.0/25.0)*size;
            taps3 *= 4.0/25.0;
            return taps1.x * colorshadowval(center.zw, -1.5, -1.5) +
                   taps1.y * colorshadowval(center.zw,  2.0, -1.5) +
                   taps1.z * colorshadowval(center.zw, -1.5,  2.0) +
                   taps1.w * colorshadowval(center.zw,  2.0,  2.0) +
                   taps2.x * colorshadowval(center.zy,  2.0,  0.0) +
                   taps2.y * colorshadowval(center.xw,  0.0,  2.0) +
                   taps2.z * colorshadowval(center.zy, -1.5,  0.0) +
                   taps2.w * colorshadowval(center.xw,  0.0, -1.5) +
                   taps3   * colorshadowval(center.xy,  0.0,  0.0);
        ]] [result [
            return (1.0/25.0)*dot(size.zxzx*size.wwyy, taps1) +
                   (2.0/25.0)*dot(size, taps2) + 
                   (4.0/25.0)*taps3;
        ]])
    }
]]

smfilterb3 = [result [
    @(? $numargs [
        #define shadowval(center, xoff, yoff) float(shadow2DRect(tex4, center + vec3(xoff, yoff, 0.0)))
        #define colorshadowval(center, xoff, yoff) shadowcolor(center.xy + vec2(xoff, yoff))
    ])

    @(? $arg1 "vec3 filtercolorshadow" "float filtershadow") (vec3 shadowtc)
    {
        vec2 offset = fract(shadowtc.xy - 0.5);
        vec3 center = shadowtc;
        center.xy -= offset*0.5;
        vec4 size = vec4(offset + 1.0, 2.0 - offset);
        vec4 taps = vec4(shadowval(center, -0.5, -0.5),
                         shadowval(center, 1.0, -0.5),
                         shadowval(center, -0.5, 1.0),
                         shadowval(center, 1.0, 1.0));
        @(if $arg1 [result [
            taps *= (1.0/9.0)*size.zxzx*size.wwyy;
            return taps.x * colorshadowval(center, -0.5, -0.5) +
                   taps.y * colorshadowval(center,  1.0, -0.5) +
                   taps.z * colorshadowval(center, -0.5,  1.0) +
                   taps.w * colorshadowval(center,  1.0,  1.0);
        ]] [result [
            return (1.0/9.0)*dot(size.zxzx*size.wwyy, taps);
        ]])
    }
]]

smfilterrg = [result [
    @(? $numargs [
        #define shadowval(center, xoff, yoff) float(shadow2DRect(tex4, center + vec3(xoff, yoff, 0.0)))
        #define colorshadowval(center, xoff, yoff) shadowcolor(center.xy + vec2(xoff, yoff))
    ])

    @(? $arg1 "vec3 filtercolorshadow" "float filtershadow") (vec3 shadowtc)
    {
        vec4 taps = vec4(shadowval(shadowtc, -0.4,  1.0),
                         shadowval(shadowtc, -1.0, -0.4),
                         shadowval(shadowtc,  0.4, -1.0),
                         shadowval(shadowtc,  1.0,  0.4));

        @(if $arg1 [result [
            taps *= 0.25;
            return taps.x * colorshadowval(shadowtc, -0.4,  1.0) +
                   taps.y * colorshadowval(shadowtc, -1.0, -0.4) +
                   taps.z * colorshadowval(shadowtc,  0.4, -1.0) +
                   taps.w * colorshadowval(shadowtc,  1.0,  0.4);
        ]] [result [
            return dot(vec4(0.25), taps);
        ]])
    }
]]

smfilternone = [result [
    @(? $arg1 "vec3 filtercolorshadow" "float filtershadow") (vec3 shadowtc)
    {
        return @(? $arg1 [shadowcolor(shadowtc.xy) *]) float(shadow2DRect(tex4, shadowtc));
    }
]]

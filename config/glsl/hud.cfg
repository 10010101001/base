///////////////////////////////////////////////////
//
// used for rendering to the HUD
//
///////////////////////////////////////////////////

shader 0 "hudrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0; 
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader 0 "hudrect" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0; 
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = colorscale * texture2DRect(tex0, texcoord0);
    }
]

shader 0 "hud3d" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 color;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        color = vcolor;
    }
] [
    uniform sampler3D tex0;
    varying vec3 texcoord0;
    varying vec4 color;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = color * texture3D(tex0, texcoord0);
    }
]

shader 0 "hudcubemap" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform samplerCube tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = colorscale * textureCube(tex0, texcoord0);
    }
]

shader 0 "huddamage" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    varying vec2 pos;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        pos = vvertex.xy;
        texcoord0 = vtexcoord0; 
        colorscale = vcolor;
    }
] [
    uniform float time;
    uniform vec2 speed;
    uniform vec3 colour;
    uniform sampler2D tex0; // mask
    uniform sampler2D tex1; // mixer

    varying vec2 texcoord0;
    varying vec4 colorscale;
    varying vec2 pos;
    fragdata(0) vec4 fragcolor;

    float rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898, 78.233)))*43758.5453); }
    
    void main(void)
    {
        vec4 mask = texture2D(tex0, texcoord0);
        if(mask.a > 0.0)
        {
            vec4 mixer = texture2D(tex1, vec2(pos.x, pos.y-time*speed.x));
            mixer += texture2D(tex1, vec2(pos.x+0.33, pos.y+time*speed.y));
            fragcolor.rgb = mix(vec3(rand(vec2(pos.y, pos.y+(rand(vec2(time))-0.5)/16.0))), colour*mixer.r, mixer.r)*colorscale.rgb;
            fragcolor.a = mask.a*colorscale.a;
        }
        else fragcolor = vec4(0);
    }
]

